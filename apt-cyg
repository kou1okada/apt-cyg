#!/usr/bin/env bash

# apt-cyg: install tool for cygwin similar to debian apt-get

# The MIT License (MIT)
# 
# Copyright (c) 2013 Trans-code Design
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# 

# ./cygwin.pub
# ------------
# pub   1024D/676041BA 2008-06-13
# uid                  Cygwin <cygwin@cygwin.com>
# sub   1024g/A1DB7B5C 2008-06-13
CYGWIN_PKEY_URL_LATEST="https://sourceware.org/cgi-bin/cvsweb.cgi/~checkout~/setup/cygwin.pub?cvsroot=cygwin-apps"
CYGWIN_PKEY_URL="https://sourceware.org/cgi-bin/cvsweb.cgi/~checkout~/setup/cygwin.pub?rev=2.1&cvsroot=cygwin-apps"
CYGWIN_PKEY_MD5="8fe5366fc82289578ab9b6e3c9f1bff9"

CYGWINPORTS_PKEY_URL="http://cygwinports.org/ports.gpg"
CYGWINPORTS_PKEY_MD5="4c7904807340411f48f7519173cd600d"
# this script requires some packages

WGET="`which wget 2> /dev/null`"
TAR="`which tar 2> /dev/null`"
GAWK="`which awk 2> /dev/null`"
GPGV="`which gpgv 2> /dev/null`"
if [ "$WGET" = "" -o "$TAR" = "" -o "$GAWK" = "" ]; then
  echo You must install wget, tar and gawk to use apt-cyg.
  exit 1
fi

function usage()
{
  echo apt-cyg: Installs and removes Cygwin packages.
  echo "  \"apt-cyg install <package names>\" to install packages"
  echo "  \"apt-cyg remove <package names>\" to remove packages"
  echo "  \"apt-cyg update\" to update setup.ini"
  echo "  \"apt-cyg show\" to show installed packages"
  echo "  \"apt-cyg find <patterns>\" to find packages matching patterns"
  echo "  \"apt-cyg describe <patterns>\" to describe packages matching patterns"
  echo "  \"apt-cyg packageof <commands or files>\" to locate parent packages"
  echo "Options:"
  echo "  --charch <arch>    : change archetecture (must appear first)"
  echo "  --use-setuprc      : set cache and mirror with /etc/setup/setup.rc"
  echo "  --ignore-case,-i   : ignore case distinctions for <patterns>"
  echo "  --force-remove     : force remove"
  echo "  --force-update-pkey: force update public key of cygwin"
  echo "  --no-verify, -X    : Don't verify setup.ini signatures"
  echo "  --mirror, -m <url> : set mirror"
  echo "  --cache, -c <dir>  : set cache"
  echo "  --file, -f <file>  : read package names from file"
  echo "  --noupdate, -u     : don't update setup.ini from mirror"
  echo "  --ipv4, -4         : wget prefer ipv4"
  echo "  --help"
  echo "  --version"
}



function version()
{
  echo "apt-cyg version 0.57"
  echo "Written by Stephen Jungels"
  echo ""
  echo "Copyright (c) 2005-9 Stephen Jungels.  Released under the GPL."
}

function current_cygarch ()
{
  arch | sed -e 's/^i686$/x86/g'
}

function findworkspace()
{
  # default working directory, mirror and architecture

  mirror=ftp://mirror.mcs.anl.gov/pub/cygwin
  arch=`current_cygarch`
  cache=/setup
  
  # work wherever setup worked last, if possible
  
  if test -e /etc/setup/last-cache
  then
    tmp="`head -1 /etc/setup/last-cache`"
    cache="`cygpath -au "$tmp"`"
  fi
  
  if test -e /etc/setup/last-mirror
  then
    mirror="`head -1 /etc/setup/last-mirror`"
  fi
  mirrordir="`echo "$mirror" | sed -e "s/:/%3a/g" -e "s:/:%2f:g"`"
  
  echo Working directory is $cache
  echo Mirror is $mirror
  mkdir -p "$cache/$mirrordir/$arch"
  cd "$cache/$mirrordir/$arch"
  
  update_cygwin_pkey
}

function getsetup() 
{
  if test "$noscripts" == "0" -a "$noupdate" == "0"
  then
    touch setup.ini
    mv setup.ini setup.ini-save
    "${WGET[@]}" -N "$mirror/$arch/setup.bz2" "$mirror/$arch/setup.bz2.sig"
    if [[ -e setup.bz2 && -e setup.bz2.sig && $? -eq 0 ]]; then
      [[ "$no_verify" == "" ]] && verify_signatures setup.bz2.sig
      bunzip2 setup.bz2
      mv setup setup.ini
      echo Updated setup.ini
    else
      "${WGET[@]}" -N "$mirror/$arch/setup.ini" "$mirror/$arch/setup.ini.sig"
      if [[ -e setup.ini && -e setup.ini.sig && $? -eq 0 ]]; then
        [[ "$no_verify" == "" ]] && verify_signatures setup.ini.sig
        echo Updated setup.ini
      else
        mv setup.ini-save setup.ini
        echo Error updating setup.ini, reverting
      fi
    fi
  fi
}

setup_release_name()
{
  release_name="`cat setup.ini | awk '/release:/ {print $2}'`"
  case "$release_name" in
    cygwin)
      PKEY_URL_LATEST="$CYGWIN_PKEY_URL_LATEST"
      PKEY_URL="$CYGWIN_PKEY_URL"
      PKEY_MD5="$CYGWIN_PKEY_MD5"
      pkey_latest="$cache/cygwin_latest.pub"
      pkey="$cache/cygwin.pub"
    ;;
    cygwinports)
      PKEY_URL_LATEST="$CYGWINPORTS_PKEY_URL"
      PKEY_URL="$CYGWINPORTS_PKEY_URL"
      PKEY_MD5="$CYGWINPORTS_PKEY_MD5"
      pkey_latest="$cache/ports.gpg"
      pkey="$cache/ports.gpg"
    ;;
    *)
      echo "Error: unknown release name $release_name"
      exit 1
    esac
}

function checkpackages()
{
  if test "-$packages-" = "--"
  then
    echo Nothing to do, exiting
    exit 0
  fi
}

# Usage: getrootdir arch
function getrootdir ()
{
  case "$1" in
    x86)
      cygpath -u "$(cat /proc/registry32/HKEY_LOCAL_MACHINE/SOFTWARE/Cygwin/setup/rootdir)" ;;
    x86_64)
      cygpath -u "$(cat /proc/registry64/HKEY_LOCAL_MACHINE/SOFTWARE/Cygwin/setup/rootdir)" ;;
    *)
      echo "Error: unknown arch $1" >&2 ;;
  esac
}

# Usage: charch arch apt-cyg_parms ...
function charch ()
{
  local rootdir
  if [ "`current_cygarch`" != "$1" ]; then
    echo -e "\e[32;1mcharch to:\e[30;0m $1"
    rootdir="`getrootdir "$1"`"
    shift
    chroot "$rootdir" "$rootdir/bin/bash" -lc \
      'cd "$1"; shift ; "$0" "$@"' \
      "$(which "$0" | xargs cygpath -aml | xargs cygpath -u)" \
      "$(pwd        | xargs cygpath -aml | xargs cygpath -u)" \
      "$@"
    exit $?
  fi
}

function update_cygwin_pkey ()
{
  setup_release_name
  [[ "$force_update_pkey" != "" || ! -e "$pkey_latest" ]] && "${WGET[@]}" "$PKEY_URL_LATEST" -O "$pkey_latest"
  [[ "$force_update_pkey" != "" || ! -e "$pkey"        ]] && "${WGET[@]}" "$PKEY_URL"        -O "$pkey"
  check_cygwin_pkey
}

function check_cygwin_pkey ()
{
  if ! echo "$PKEY_MD5 *$pkey" | md5sum -c; then
    echo "Warning: Maybe CSV repository of cygwin has been cracked !!!"
    exit 1
  fi
  if ! echo "$PKEY_MD5 *$pkey_latest" | md5sum -c; then
    echo "Warning: Maybe public key of cygwin has been updated."
  fi
}

# Usage: verify_signatures files ...
function verify_signatures ()
{
  while [[ $# -gt 0 ]]; do
    if ! "$GPGV" --keyring "$pkey" "$1"; then
      echo "Error: BAD signature: $1"
      exit 1
    fi
    shift
  done
}

# process options

noscripts=0
noupdate=0
file=""
dofile=0
command=""
filepackages=""
packages=""
ignore_case=""
force_remove=""
force_update_pkey=""
no_verify=""
nargs=$#

while test $# -gt 0
do
  case "$1" in

    --charch)
      if [ "$#" -lt "$nargs" ]; then
        echo "Error: $1 $2 option must appear first." >&2
        exit 1
      fi
      charch "$2" "$@"
      shift ; shift
    ;;

    --use-setuprc)
      "$0" -c "$(grep -A1 last-cache  /etc/setup/setup.rc | tail -n1 | sed -r 's/^\s*|\s*$//g')" > /dev/null
      "$0" -m "$(grep -A1 last-mirror /etc/setup/setup.rc | tail -n1 | sed -r 's/^\s*|\s*$//g')" > /dev/null
      shift
    ;;

    --ignore-case|-i)
      ignore_case="$1"
      shift
    ;;

    --force-remove)
      force_remove=1
      shift
    ;;

    --force-update-pkey)
      force_update_pkey=1
      shift
    ;;

    --no-verify|-X)
      no_verify=1
      shift
    ;;

    --mirror|-m)
      echo "$2" > /etc/setup/last-mirror
      shift ; shift
    ;;

    --cache|-c)
      cygpath -aw "$2" > /etc/setup/last-cache
      shift ; shift
    ;;

    --noscripts)
      noscripts=1
      shift
    ;;

    --noupdate|-u)
      noupdate=1
      shift
    ;;

    --ipv4|-4)
      WGET=( "${WGET[@]}" "--prefer-family=IPv4" )
      shift
    ;;

    --help)
      usage
      exit 0
    ;;

    --version)
      version
      exit 0
    ;;

    --file|-f)
      if ! test "-$2-" = "--"
      then
        file="$2"
        dofile=1
        shift
      else
        echo 1>&2 No file name provided, ignoring $1
      fi
      shift
    ;;

    update|show|find|describe|packageof|install|remove)
      if test "-$command-" = "--"
      then
        command=$1
      else
        packages="$packages $1"
      fi
      shift

    ;;

    *)
      packages="$packages $1"
      shift

    ;;

  esac
done

if [[ "$GPGV" == "" && "$no_verify" == "" ]]; then
  echo "Error: GnuPG is not installed. Prease install gnupg package or use -X option."
  exit 1
fi

if test $dofile = 1
then
  if test -f "$file"
  then
    filepackages="$filepackages `cat "$file" | awk '{printf "%s ", $0}'`"
  else
    echo File $file not found, skipping
  fi
  packages="$packages $filepackages"
fi


case "$command" in

  update)

    findworkspace
    getsetup

  ;;


  show)

    echo 1>&2 The following packages are installed:
    cat /etc/setup/installed.db | awk '/[^ ]+ [^ ]+ 0/ {print $1}'

  ;;


  find)

    checkpackages
    findworkspace
    getsetup

    for pkg in $packages
    do
      echo ""
      echo Searching for installed packages matching $pkg:
      awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query="$pkg" IGNORECASE="$ignore_case" /etc/setup/installed.db
      echo ""
      echo Searching for installable packages matching $pkg:
      cat setup.ini | awk -v query="$pkg" -v IGNORECASE="$ignore_case" \
        'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $1}}'
    done

  ;;


  describe)

    checkpackages
    findworkspace
    getsetup
    for pkg in $packages
    do
      echo ""
      cat setup.ini | awk -v query="$pkg" -v IGNORECASE="$ignore_case" \
        'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $0 "\n"}}'
    done

  ;;


  packageof)

    checkpackages
    for pkg in $packages
    do
      key=`which "$pkg" 2>/dev/null | sed "s:^/::"`
      if test "-$key-" = "--"
      then
        key="$pkg"
      fi
      for manifest in /etc/setup/*.lst.gz
      do
        found=`cat $manifest | gzip -d | grep -c "$key"`
        if test $found -gt 0
        then
          package=`echo $manifest | sed -e "s:/etc/setup/::" -e "s/.lst.gz//"`
          echo Found $key in the package $package
        fi
      done
    done

  ;;


  install)

    checkpackages
    findworkspace
    getsetup

    for pkg in $packages
    do

    already=`grep -c "^$pkg " /etc/setup/installed.db`
    if test $already -ge 1
    then
      echo Package $pkg is already installed, skipping
      continue
    fi
    echo ""
    echo Installing $pkg

    # look for package and save desc file

    mkdir -p "release/$pkg"
    cat setup.ini | awk > "release/$pkg/desc" -v package="$pkg" \
      'BEGIN{RS="\n\n@ "; FS="\n"} {if ($1 == package) {desc = $0; px++}} \
       END {if (px == 1 && desc != "") print desc; else print "Package not found"}' 
    
    desc=`cat "release/$pkg/desc"`
    if test "-$desc-" = "-Package not found-"
    then
      echo Package $pkg not found or ambiguous name, exiting
      rm -r "release/$pkg"
      exit 1
    fi
    echo Found package $pkg

    # download and unpack the bz2 file

    # pick the latest version, which comes first
    install=`cat "release/$pkg/desc" | awk '/^install: / { print $2; exit }'` 

    if test "-$install-" = "--"
    then
      echo "Could not find \"install\" in package description: obsolete package?"
      exit 1
    fi

    file=`basename $install`
    cd "release/$pkg"
    "${WGET[@]}" -nc $mirror/$install
    
    # check the md5
    digest=`cat "desc" | awk '/^install: / { print $4; exit }'` 
    digactual=`md5sum $file | awk '{print $1}'`
    if ! test $digest = $digactual
    then
      echo MD5 sum did not match, exiting
      exit 1
    fi
    
    echo "Unpacking..."
    tar > "/etc/setup/$pkg.lst" xvf "$file" -C /
    gzip -f "/etc/setup/$pkg.lst"
    cd ../..
    
    
    # update the package database
    
    cat /etc/setup/installed.db | awk > /tmp/awk.$$ -v pkg="$pkg" -v bz=$file \
      '{if (ins != 1 && pkg < $1) {print pkg " " bz " 0"; ins=1}; print $0} \
       END{if (ins != 1) print pkg " " bz " 0"}'
    mv /etc/setup/installed.db /etc/setup/installed.db-save
    mv /tmp/awk.$$ /etc/setup/installed.db
    
    
    # recursively install required packages
    
    requires=`grep "^requires: " "release/$pkg/desc" | sed -re 's/^requires: *(.*[^ ]) */\1/g' -e 's/ +/ /g'`
    
    warn=0
    if ! test "-$requires-" = "--"
    then
      echo Package $pkg requires the following packages, installing:
      echo $requires
      for package in $requires
      do
        already=`grep -c "^$package " /etc/setup/installed.db`
        if test $already -ge 1
        then
          echo Package $package is already installed, skipping
          continue
        fi
        apt-cyg --noscripts install $package
        if ! test $? = 0 ; then warn=1; fi
      done
    fi
    if ! test $warn = 0
    then
      echo "Warning: some required packages did not install, continuing"
    fi
    
    # run all postinstall scripts
    
    pis=`ls /etc/postinstall/*.sh 2>/dev/null | wc -l`
    if test $pis -gt 0 && ! test $noscripts -eq 1
    then
      echo Running postinstall scripts
      for script in /etc/postinstall/*.sh
      do
        $script
        mv $script $script.done
      done
    fi
    
    echo Package $pkg installed

    done

  ;;


  remove)

    checkpackages
    for pkg in $packages
    do

    already=`grep -c "^$pkg " /etc/setup/installed.db`
    if test $already = 0
    then
      echo Package $pkg is not installed, skipping
      continue
    fi

    dontremove="cygwin coreutils gawk bzip2 tar xz wget bash"
    for req in $dontremove
    do
      if test "-$pkg-" = "-$req-"
      then
        echo apt-cyg cannot remove package $pkg, exiting
        exit 1
      fi
    done

    if test ! -e "/etc/setup/$pkg.lst.gz" -a "$force_remove" = ""
    then
      echo Package manifest missing, cannot remove $pkg.  Exiting
      exit 1
    fi
    echo Removing $pkg

    # run preremove scripts

    if test -e "/etc/preremove/$pkg.sh"
    then
      "/etc/preremove/$pkg.sh"
    fi

    cat "/etc/setup/$pkg.lst.gz" | gzip -d | awk '/[^\/]$/ {print "rm -f \"/" $0 "\""}' | sh
    cat /etc/setup/installed.db | awk > /tmp/awk.$$ -v pkg="$pkg" '{if (pkg != $1) print $0}'
    rm -f "/etc/postinstall/$pkg.sh.done" "/etc/preremove/$pkg.sh" "/etc/setup/$pkg.lst.gz"
    mv /etc/setup/installed.db /etc/setup/installed.db-save
    mv /tmp/awk.$$ /etc/setup/installed.db
    echo Package $pkg removed

    done

  ;;

  *)

    usage

  ;;

esac

